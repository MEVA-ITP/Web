const atom = require("falcor-json-graph").atom;
const ref = require("falcor-json-graph").ref;
const _ = require("lodash");
const Rx = require("rx");
const expect = require("chai").expect;
const it = require("mocha").it;
const ErrorDataSource = require("./data/ErrorDataSource");

function toObservable(response) {
    return Rx.Observable.create(observer => {
        return response.subscribe(observer);
    });
}

const Model = require("..").Model;
// var Model = require("../lib");
// var Model = require("falcor");
// var Model = require("../dist/falcor.browser").Model;

const cache = {
    list: {
        0: ref(["videos", 123]),
        1: ref(["videos", 456])
    },
    videos: {
        123: { name: atom() },
        456: { name: atom("Die Hard"), rating: atom() }
    }
};
const model = new Model({ cache });
const _get = model.get.bind(model);
const _getV = model.getValue.bind(model);

function removePaths(obj) {
    return typeof obj === "object" ? _.mapValues(_.omit(obj, ["$__path"]), removePaths) : obj;
}

function observeJsonOutput(getter, path) {
    return toObservable(getter(path))
        .map(removePaths)
        .map(JSON.stringify)
        .defaultIfEmpty("no result")
        .toPromise()
        .then(values => {
            return [path, values];
        });
}

function observeOutput(getter, path) {
    return toObservable(getter(path))
        .defaultIfEmpty("no result")
        .toPromise()
        .then(values => {
            return [path, values];
        });
}

// it("get() with ref and beyond", function(done) {
//     var path = [["list", 1], ["list", 0], ["list", 1, "name"]];
//     model.get.apply(model, path).subscribe(function(x) {
//         console.log(path);
//         console.log(JSON.stringify(x, null, 4));
//     }, done, done);
// });

// it("get() no onNext for empty atom", function(done) {
//     observeJsonOutput(_get, ["videos", 123, "name"]).then(function(x) {
//         expect(x[1]).to.equal("no result");
//         done();
//     }).catch(done);
// });

// it("get() no onNext for missing path", function(done) {
//     observeJsonOutput(_get, ["videos", 123, "rating"]).then(function(x) {
//         expect(x[1]).to.equal("no result");
//         done();
//     }).catch(done);
// });

// it("get() no ref output", function(done) {
//     observeJsonOutput(_get, ["list", 0]).then(function(x) {
//         expect(x[1]).to.equal(JSON.stringify({json: {list: {}}}));
//         done();
//     }).catch(done);
// });

// it("getValue() no onNext for empty atom", function(done) {
//     observeOutput(_getV, ["videos", 123, "name"]).then(function(x) {
//         expect(x[1]).to.equal("no result");
//         done();
//     }).catch(done);
// });

// it("getValue() no onNext for missing path", function(done) {
//     observeOutput(_getV, ["videos", 123, "rating"]).then(function(x) {
//         expect(x[1]).to.equal("no result");
//         done();
//     }).catch(done);
// });

// it("getValue() no ref output", function(done) {
//     observeOutput(_getV, ["list", 0]).then(function(x) {
//         expect(x[1]).to.equal(undefined);
//         done();
//     }).catch(done);
// });

it("errors", done => {
    const m = new Model({
        cache: { list: { 1: { name: "x" } } },
        source: new ErrorDataSource(404, "what"),
        _treatDataSourceErrorsAsJSONGraphErrors: false
    });
    m.get(["list", [0, 1], "name"]).subscribe(
        response => {
            console.log("onNext:", JSON.stringify(removePaths(response)));
        },
        e => {
            console.log("onError:", e);
            done();
        },
        () => {
            done("expected error");
        }
    );
});

// it("get", function(done) {
//     var _get = model.get.bind(model);
//     var _getV = model.getValue.bind(model);
//     console.log("cache:", JSON.stringify(cache, null, 2), "\n");

//     Promise.all([
//         Rx.Observable.of(" -- Model.get -- ").toPromise(),
//         observeJsonOutput(_get, []),
//         observeJsonOutput(_get, ["videos", 123, "name"]),
//         observeJsonOutput(_get, ["videos", 123, "rating"]),
//         observeJsonOutput(_get, ["videos", 123, ["name", "rating"]]),
//         observeJsonOutput(_get, ["videos", 456, "name"]),
//         observeJsonOutput(_get, ["videos", 456, "rating"]),
//         observeJsonOutput(_get, ["videos", 456, ["name", "rating"]]),
//         observeJsonOutput(_get, ["videos", [123, 456], ["name", "rating"]]),
//         observeJsonOutput(_get, ["videos", 789, "name"]),

//         Rx.Observable.of(" -- Model.get with ref -- ").toPromise(),
//         observeJsonOutput(_get, ["list", 0, "name"]),
//         observeJsonOutput(_get, ["list", 0, "rating"]),
//         observeJsonOutput(_get, ["list", 0, ["name", "rating"]]),
//         observeJsonOutput(_get, ["list", 1, "name"]),
//         observeJsonOutput(_get, ["list", 1, "rating"]),
//         observeJsonOutput(_get, ["list", 1, ["name", "rating"]]),
//         observeJsonOutput(_get, ["list", [0, 1], ["name", "rating"]]),
//         observeJsonOutput(_get, ["list", 2, "name"]),

//         Rx.Observable.of(" -- Model.getValue -- ").toPromise(),
//         observeOutput(_getV, ["videos", 123, "name"]),
//         observeOutput(_getV, ["videos", 123, "rating"]),
//         observeOutput(_getV, ["videos", 456, "name"]),
//         observeOutput(_getV, ["videos", 456, "rating"]),
//         observeOutput(_getV, ["videos", 789, "name"]),

//         Rx.Observable.of(" -- Model.getValue with ref -- ").toPromise(),
//         observeOutput(_getV, ["list", 0, "name"]),
//         observeOutput(_getV, ["list", 0, "rating"]),
//         observeOutput(_getV, ["list", 1, "name"]),
//         observeOutput(_getV, ["list", 1, "rating"]),
//         observeOutput(_getV, ["list", 2, "name"])

//     ]).then(function(x) {
//         x.map(function(y) {
//             if (Array.isArray(y)) {
//                 console.log("input:", y[0], "\noutput:", y[1], "\n"); // eslint-disable-line no-console
//             } else {
//                 console.log(y); // eslint-disable-line no-console
//             }
//         });
//         done();
//     });
// });
